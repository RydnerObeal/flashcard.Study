@model IEnumerable<Flashcards.Infrastructure.Entities.Flashcard>
@{
    var deck = (Flashcards.Infrastructure.Entities.Deck)ViewBag.Deck;
    ViewData["Title"] = $"Review - {deck.Name}";
}

<style>
  .flashcard-container {
    perspective: 1000px;
    width: 100%;
    max-width: 500px;
    height: 300px;
    margin: 0 auto;
  }

  .flashcard {
    position: relative;
    width: 100%;
    height: 100%;
    text-align: center;
    transition: transform 0.6s;
    transform-style: preserve-3d;
    cursor: pointer;
  }

  .flashcard.flipped {
    transform: rotateY(180deg);
  }

  .flashcard-front, .flashcard-back {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    border-radius: 15px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    padding: 20px;
    box-sizing: border-box;
  }

  .flashcard-front {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
  }

  .flashcard-back {
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    color: white;
    transform: rotateY(180deg);
  }

  .flashcard-content {
    font-size: 1.5rem;
    font-weight: 500;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
  }

  .card-counter {
    position: absolute;
    top: 10px;
    right: 15px;
    background: rgba(255,255,255,0.2);
    padding: 5px 10px;
    border-radius: 20px;
    font-size: 0.9rem;
    backdrop-filter: blur(10px);
  }

  .flip-hint {
    position: absolute;
    bottom: 15px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(255,255,255,0.2);
    padding: 8px 15px;
    border-radius: 20px;
    font-size: 0.8rem;
    backdrop-filter: blur(10px);
    animation: pulse 2s infinite;
  }

  @@keyframes pulse {
    0% { opacity: 0.6; }
    50% { opacity: 1; }
    100% { opacity: 0.6; }
  }

  .controls {
    text-align: center;
    margin-top: 30px;
  }

  .btn-custom {
    margin: 0 10px;
    padding: 12px 24px;
    border-radius: 25px;
    border: none;
    font-weight: 500;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .btn-correct {
    background: linear-gradient(45deg, #56ab2f, #a8e6cf);
    color: white;
  }

  .btn-wrong {
    background: linear-gradient(45deg, #ff416c, #ff4b2b);
    color: white;
  }

  .btn-custom:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
  }

  .btn-custom:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .stats-bar {
    background: white;
    border-radius: 15px;
    padding: 20px;
    margin: 20px 0;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .stat-item {
    text-align: center;
  }

  .stat-number {
    font-size: 1.8rem;
    font-weight: bold;
    color: #667eea;
  }

  .stat-label {
    font-size: 0.9rem;
    color: #666;
    margin-top: 5px;
  }
</style>

<div class="container mt-4">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h3 class="mb-0">Review: @deck.Name</h3>
    <span class="badge bg-primary">Playing as: @User.Identity?.Name</span>
  </div>

  <div class="stats-bar">
    <div class="stat-item">
      <div class="stat-number" id="idx">0</div>
      <div class="stat-label">Current</div>
    </div>
    <div class="stat-item">
      <div class="stat-number" id="total">0</div>
      <div class="stat-label">Total Cards</div>
    </div>
    <div class="stat-item">
      <div class="stat-number" id="correct">0</div>
      <div class="stat-label">Correct</div>
    </div>
  </div>

  <div class="flashcard-container">
    <div class="flashcard" id="flashcard">
      <div class="flashcard-front">
        <div class="flashcard-content" id="front"></div>
        <div class="card-counter" id="counter"></div>
        <div class="flip-hint" id="flipHint">Click to reveal answer</div>
      </div>
      <div class="flashcard-back">
        <div class="flashcard-content" id="answer"></div>
        <div class="card-counter">Answer</div>
      </div>
    </div>
  </div>

  <div class="controls">
    <button id="correctBtn" class="btn btn-custom btn-correct" disabled>✓ Correct</button>
    <button id="wrongBtn" class="btn btn-custom btn-wrong" disabled>✗ Wrong</button>
  </div>

  <form id="resultForm" asp-action="SaveResult" asp-controller="Study" method="post" class="mt-3" style="text-align: center;">
    <input type="hidden" name="deckId" value="@deck.Id" />
    <input type="hidden" name="correct" id="correctField" />
    <input type="hidden" name="total" id="totalField" />
    <input type="hidden" name="mode" value="Review" />
    <button id="finishBtn" type="submit" class="btn btn-primary" style="display:none; padding: 12px 30px; border-radius: 25px;">✓ Finish & Save Score</button>
    <a asp-action="Scores" asp-route-deckId="@deck.Id" class="btn btn-outline-secondary" style="padding: 12px 30px; border-radius: 25px;">Scores</a>
  </form>
</div>

@section Scripts {
<script>
(() => {
  const cards = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Select(c => new { c.Front, c.Back })));
  let i = 0, correct = 0, isFlipped = false;
  
  const flashcard = document.getElementById('flashcard');
  const front = document.getElementById('front');
  const ans = document.getElementById('answer');
  const correctBtn = document.getElementById('correctBtn');
  const wrongBtn = document.getElementById('wrongBtn');
  const idx = document.getElementById('idx');
  const total = document.getElementById('total');
  const counter = document.getElementById('counter');
  const flipHint = document.getElementById('flipHint');
  const correctLbl = document.getElementById('correct');
  const finishBtn = document.getElementById('finishBtn');
  const correctField = document.getElementById('correctField');
  const totalField = document.getElementById('totalField');

  total.textContent = cards.length;
  totalField.value = cards.length;

  function render() {
    if (i >= cards.length) {
      correctBtn.disabled = true; wrongBtn.disabled = true;
      flashcard.style.display = 'none';
      flipHint.style.display = 'none';
      finishBtn.style.display = 'inline-block';
      correctField.value = correct;
      return;
    }
    idx.textContent = (i + 1).toString();
    counter.textContent = `${i + 1}/${cards.length}`;
    front.textContent = cards[i].Front;
    ans.textContent = cards[i].Back;
    flashcard.classList.remove('flipped');
    isFlipped = false;
    correctBtn.disabled = true;
    wrongBtn.disabled = true;
    flipHint.style.display = 'block';
  }

  flashcard.addEventListener('click', () => {
    if (i >= cards.length) return;
    flashcard.classList.toggle('flipped');
    isFlipped = !isFlipped;
    if (isFlipped) {
      correctBtn.disabled = false;
      wrongBtn.disabled = false;
      flipHint.style.display = 'none';
    }
  });

  correctBtn.addEventListener('click', () => { 
    correct++; 
    correctLbl.textContent = correct; 
    i++; 
    render(); 
  });
  
  wrongBtn.addEventListener('click', () => { 
    i++; 
    render(); 
  });

  render();
})();
</script>
}
