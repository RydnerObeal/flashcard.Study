@model IEnumerable<Flashcards.Infrastructure.Entities.Flashcard>
@{
    var deck = (Flashcards.Infrastructure.Entities.Deck)ViewBag.Deck;
    ViewData["Title"] = $"Review - {deck.Name}";
}
<div class="container mt-4">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h3 class="mb-0">Review: @deck.Name</h3>
    <div class="input-group" style="max-width:280px;">
      <span class="input-group-text">Player</span>
      <input id="playerName" class="form-control" placeholder="Your name" />
    </div>
  </div>

  <div class="card shadow-sm">
    <div class="card-body">
      <div id="cardArea" class="text-center" style="min-height:180px;">
        <h4 id="front"></h4>
        <div id="answer" class="mt-3 text-muted" style="display:none"></div>
      </div>
      <div class="d-flex gap-2 mt-3">
        <button id="showBtn" class="btn btn-outline-primary">Show Answer</button>
        <button id="correctBtn" class="btn btn-success" disabled>I was Correct</button>
        <button id="wrongBtn" class="btn btn-danger" disabled>I was Wrong</button>
      </div>
      <div class="mt-3">
        <span class="badge text-bg-secondary">Card <span id="idx">0</span>/<span id="total">0</span></span>
        <span class="badge text-bg-success ms-2">Correct: <span id="correct">0</span></span>
      </div>
    </div>
  </div>

  <form id="resultForm" asp-action="SaveResult" asp-controller="Study" method="post" class="mt-3">
    <input type="hidden" name="deckId" value="@deck.Id" />
    <input type="hidden" name="playerName" id="playerNameField" />
    <input type="hidden" name="correct" id="correctField" />
    <input type="hidden" name="total" id="totalField" />
    <input type="hidden" name="mode" value="Review" />
    <button id="finishBtn" type="submit" class="btn btn-primary" style="display:none">Finish & Save Score</button>
    <a asp-action="Scores" asp-route-deckId="@deck.Id" class="btn btn-outline-secondary">Scores</a>
  </form>
</div>

@section Scripts {
<script>
(() => {
  const cards = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Select(c => new { c.Front, c.Back })));
  let i = 0, correct = 0;
  const front = document.getElementById('front');
  const ans = document.getElementById('answer');
  const showBtn = document.getElementById('showBtn');
  const correctBtn = document.getElementById('correctBtn');
  const wrongBtn = document.getElementById('wrongBtn');
  const idx = document.getElementById('idx');
  const total = document.getElementById('total');
  const correctLbl = document.getElementById('correct');
  const finishBtn = document.getElementById('finishBtn');
  const correctField = document.getElementById('correctField');
  const totalField = document.getElementById('totalField');
  const playerNameField = document.getElementById('playerNameField');
  const playerNameInput = document.getElementById('playerName');

  total.textContent = cards.length;
  totalField.value = cards.length;

  function render() {
    if (i >= cards.length) {
      showBtn.disabled = true; correctBtn.disabled = true; wrongBtn.disabled = true;
      finishBtn.style.display = 'inline-block';
      correctField.value = correct;
      playerNameField.value = playerNameInput.value || 'Guest';
      return;
    }
    idx.textContent = (i + 1).toString();
    front.textContent = cards[i].Front;
    ans.style.display = 'none'; ans.textContent = cards[i].Back;
    showBtn.disabled = false; correctBtn.disabled = true; wrongBtn.disabled = true;
  }

  showBtn.addEventListener('click', () => {
    ans.style.display = '';
    correctBtn.disabled = false; wrongBtn.disabled = false; showBtn.disabled = true;
  });
  correctBtn.addEventListener('click', () => { correct++; correctLbl.textContent = correct; i++; render(); });
  wrongBtn.addEventListener('click', () => { i++; render(); });

  render();
})();
</script>
}
