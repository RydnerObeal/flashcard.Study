@model IEnumerable<Flashcards.Infrastructure.Entities.Flashcard>
@{
    var deck = (Flashcards.Infrastructure.Entities.Deck)ViewBag.Deck;
    ViewData["Title"] = $"Quiz - {deck.Name}";
}
<div class="container mt-4">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h3 class="mb-0">Quiz: @deck.Name</h3>
    <div class="input-group" style="max-width:280px;">
      <span class="input-group-text">Player</span>
      <input id="playerName" class="form-control" placeholder="Your name" />
    </div>
  </div>

  <div class="card shadow-sm">
    <div class="card-body">
      <div id="quizArea" style="min-height:200px;">
        <div class="mb-2 text-muted">Card <span id="idx">0</span>/<span id="total">0</span></div>
        <h4 id="qFront"></h4>
        <div class="input-group mt-3">
          <input id="answerInput" class="form-control" placeholder="Type your answer" />
          <button id="submitBtn" class="btn btn-primary" type="button">Submit</button>
        </div>
        <div id="feedback" class="mt-2"></div>
      </div>
      <div class="mt-3">
        <span class="badge text-bg-success">Correct: <span id="correct">0</span></span>
      </div>
    </div>
  </div>

  <form id="resultForm" asp-action="SaveResult" asp-controller="Study" method="post" class="mt-3">
    <input type="hidden" name="deckId" value="@deck.Id" />
    <input type="hidden" name="playerName" id="playerNameField" />
    <input type="hidden" name="correct" id="correctField" />
    <input type="hidden" name="total" id="totalField" />
    <input type="hidden" name="mode" value="Quiz" />
    <button id="finishBtn" type="submit" class="btn btn-primary" style="display:none">Finish & Save Score</button>
    <a asp-action="Scores" asp-route-deckId="@deck.Id" class="btn btn-outline-secondary">Scores</a>
  </form>
</div>

@section Scripts {
<script>
(() => {
  const cards = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Select(c => new { c.Front, c.Back })));
  let i = 0, correct = 0;
  const qFront = document.getElementById('qFront');
  const idx = document.getElementById('idx');
  const total = document.getElementById('total');
  const answerInput = document.getElementById('answerInput');
  const submitBtn = document.getElementById('submitBtn');
  const feedback = document.getElementById('feedback');
  const correctLbl = document.getElementById('correct');
  const finishBtn = document.getElementById('finishBtn');
  const correctField = document.getElementById('correctField');
  const totalField = document.getElementById('totalField');
  const playerNameField = document.getElementById('playerNameField');
  const playerNameInput = document.getElementById('playerName');

  total.textContent = cards.length;
  totalField.value = cards.length;

  function normalize(s){ return (s||'').trim().toLowerCase(); }

  function render(){
    if (i >= cards.length){
      submitBtn.disabled = true; answerInput.disabled = true;
      feedback.innerHTML = `<div class="alert alert-info">Done! Score: ${correct}/${cards.length}</div>`;
      correctField.value = correct; playerNameField.value = playerNameInput.value || 'Guest';
      finishBtn.style.display = 'inline-block';
      return;
    }
    idx.textContent = (i+1).toString();
    qFront.textContent = cards[i].Front;
    answerInput.value=''; feedback.innerHTML=''; answerInput.focus();
  }

  submitBtn.addEventListener('click', () => {
    const user = normalize(answerInput.value);
    const expected = normalize(cards[i].Back);
    const ok = user === expected;
    if (ok){
      correct++; correctLbl.textContent = correct;
      feedback.innerHTML = '<div class="text-success">Correct!</div>';
    } else {
      feedback.innerHTML = `<div class="text-danger">Wrong. Answer: <strong>${cards[i].Back}</strong></div>`;
    }
    i++; setTimeout(render, 700);
  });

  answerInput.addEventListener('keydown', e => { if(e.key==='Enter'){ e.preventDefault(); submitBtn.click(); }});

  render();
})();
</script>
}
